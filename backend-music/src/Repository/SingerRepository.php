<?php

namespace App\Repository;

use App\Entity\Singer;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\Pagination\Paginator;

class SingerRepository extends ServiceEntityRepository implements SingerRepositoryInterface
{
	private $manager;


    /**
     * SingerRepository constructor.
     * @param ManagerRegistry $registry
     * @param ObjectManager $manager
     */
    public function __construct(ManagerRegistry $registry, EntityManagerInterface $manager)
    {
    	$this->manager = $manager;
        parent::__construct($registry, Singer::class);
    }

    /**
    * @return Singer[]
    */

    public function all(): array
    {
    	$singers = parent::findAll();

    	return $singers;
    }

    /**
    * @param @id int
    * @return Singer
    */
    public function one(int $id): Singer
    {
    	/**
    	* @var Singer $singer;
    	*/
    	$singer = parent::findOneBy(['id' => $id]);

        if ($singer == null) {
            throw new Exception("Пользователя под таким номером {$id} не существует");
        }

    	return $singer;
    }

    /**
    * @param Singer $singer
    * @return Singer
    * @throws \Doctrine\ORM\ORMException
    */
    public function save(Singer $singer): Singer
    {
        $this->manager->persist($singer);
        $this->manager->flush();

    	return $singer;
    }

    /**
	* @param Singer $singer
	* @return Singer
    * @throws \Doctrine\ORM\ORMException
    * @throws \Doctrine\ORM\OptimisticLockException
	*/
	public function update(Singer $singer): Singer 
	{
		$this->manager->flush();

		return $singer;
	}	

    public function orderByName(string $name): array {
        $this->manager->getEventManager();

        $query = $this->manager->createQuery(
            'SELECT s.name_singer, s.name_song, s.genres_song, s.year_song
            FROM App\Entity\Singer s
            WHERE s.name_singer = :name_singer
            ORDER BY s.name_singer ASC'
        )->setParameter('name_singer', $name);



        return $query->getResult();
    }

    /**
    * @param @genre string
    * @return Singer
    */
    public function orderByGenres(string $genre): array
    {
        $this->manager->getEventManager();

        $query = $this->manager->createQuery(
            'SELECT s.name_singer, s.name_song, s.genres_song, s.year_song
            FROM App\Entity\Singer s
            WHERE s.genres_song = :genres_song
            ORDER BY s.genres_song ASC'
        )->setParameter('genres_song', $genre);



        return $query->getResult();
    }

    /**
    * @param @year int
    * @return Singer
    */
    public function orderByYears(string $year): array
    {
        $this->manager->getEventManager();

        $query = $this->manager->createQuery(
            'SELECT s.name_singer, s.name_song, s.genres_song, s.year_song  
            FROM App\Entity\Singer s
            WHERE s.year_song = :year_song
            ORDER BY s.year_song ASC'
        )->setParameter('year_song', $year);

        return $query->getResult();
    }

    public function getSinger(): array
    {
        $this->manager->getEventManager();

        $query = $this->manager->createQuery(
            'SELECT s.name_singer, s.name_song, s.genres_song, s.year_song 
            FROM App\Entity\Singer s'
        );
        return $query->getResult();
    }

    public function paginate(int $page, int $limit): array 
    {
        $this->manager->getEventManager();

        $query = $this->manager->createQuery(
            'SELECT s.name_singer, s.name_song, s.genres_song, s.year_song 
            FROM App\Entity\Singer s'
        )->setFirstResult(($limit * $page) - $limit)
        ->setMaxResult($limit);
        return $query->getResult();
    }
    public function  findAll()
    {

    }

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    public function findOneBy(array $criteria, array $orderBy = null)
    {
        // TODO: Implement findOneBy() method.
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        // TODO: Implement findBy() method.
    }
}
